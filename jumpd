#!/usr/bin/env bash

# (C) 2017-2020 Takayuki Sato
# MIT License
# https://github.com/sttk/jumpd

function usage() {
cat <<EOF

jumpd -- Jump to specified or previous directory

Usage:
  . jumpd dirpath
      Jumps to dirpath and saves it as the last directory. If dirpath does not
      exist, makes dirpath directory.
  . jumpd
      Jumps to the last directory.
  . jumpd dirpath tag
      Jumps to dirpath and saves it as the last directory and saves it with
      tag. If dirpath does not exist, makes dirpath directory.
  . jumpd dirpath .
      Jumps to dirpath and saves it as the last directory and saves it with its
      basename as tag. If dirpath does not exist, makes dirpath directory.
  . jumpd { -t tag | -t=tag }
      Jumps to the directory which is saved with tag.

EOF
}

function first_char() {
  echo "${1}" | cut -c 1
}

function slice_chars() {
  echo "${1}" | cut -c ${2}-${3}
}

function find_destdir() {
  local savepath="${1}"
  local tag="${2}"

  if [[ -z "${tag}" ]]; then
    head -n 1 "${savepath}"
  else
    grep -m 1 "^${tag} " "${savepath}" | sed "s/^${tag} //"
  fi
}

function resolve_urlform() {
  local dirpath="${1}"
  local protocol="$(echo "${dirpath}" | cut -c1-8)"
  if [ "${protocol}" = "file:///" ]; then
    dirpath="$(echo "${dirpath}" | cut -c8-)"
  fi
  echo "${dirpath}"
}

function resolve_symlink() {
  local dirpath="${1}"
  if [[ -L "${dirpath}" ]]; then
    cd "$(dirname "${dirpath}")"
    dirpath="$(basename "${dirpath}")"
    dirpath="$(readlink "${dirpath}")"
  fi
  echo "${dirpath}"
}

function resolve_dir() {
  local dirpath="${1}"
  if [[ -f "${dirpath}" ]]; then
    dirpath="$(dirname "${dirpath}")"
  fi
  echo "${dirpath}"
}

function save() {
  local savepath="${1}"
  local destdir="${2}"
  local tag="${3}"

# echo "destdir=${destdir}"
# echo "tag=${tag}"

  echo "${destdir}" > "${savepath}".tmp
  if [[ ! -z "${tag}" ]]; then
    echo "${tag} ${destdir}" >> "${savepath}".tmp
  fi
  tail -n +2 "${savepath}" | sed "/^${tag} /d" >> "${savepath}".tmp
  mv "${savepath}".tmp "${savepath}"
}

function main() {
  local E_INVALID_OPTION=1
  local E_NO_LABEL=2
  local E_INVALID_DIR=3
  local E_MKDIR_FAIL=4
  local E_NO_SUCH_LABEL=5

  local savepath="${HOME}/.jumpd"
  if [[ ! -f "${savepath}" ]]; then
    touch "${savepath}"
  fi

  local tag=
  local dirpath=
  if [[ "${1}" == "" ]]; then
    :
  elif [[ "${2}" == "" ]]; then
    if [[ "$(first_char "${1}")" == "-" ]]; then
      if [[ "${1}" == "-h" ]]; then
        usage
        return 0
      elif [[ "$(slice_chars "${1}" 1 3)" == "-t=" ]]; then
        tag="$(slice_chars "${1}" 4)"
      else
        echo "Invalid option: ${1}"
        usage
        return E_INVALID_OPTION
      fi
    else
      dirpath="${1}"
    fi
  else
    if [[ "$(first_char "${1}")" == "-" ]]; then
      if [[ "${1}" == "-t" ]]; then
        if [[ "$(first_char "${2}")" != "-" ]]; then
          tag="${2}"
        else
          echo "No tag."
          usage
          return ${E_NO_LABEL}
        fi
      else
        echo "Invalid option: ${1}"
        usage
        return ${E_INVALID_OPTION}
      fi
    else
      dirpath="${1}"
      if [[ "$(first_char "${2}")" != "-" ]]; then
        tag="${2}"
      fi
    fi
  fi

  if [[ -z "${dirpath}" ]]; then
    if [[ "${tag}" == "." || "${tag}" == ".." ]]; then
      return 0
    fi

    local destdir="$(find_destdir "${savepath}" "${tag}")"
    if [[ -z "${destdir}" ]]; then
      if [[ ! -z "${tag}" ]]; then
        echo "** No such tag: ${tag}"
        return ${E_NO_SUCH_LABEL}
      fi
      return 0
    fi

    cd "${destdir}"
    save "${savepath}" "$(pwd)"
    return 0

  else
    dirpath="$(resolve_urlform "${dirpath}")"
    dirpath="$(resolve_symlink "${dirpath}")"
    dirpath="$(resolve_dir "${dirpath}")"

    if [[ ! -d "${dirpath}" ]]; then
      echo -n "'${dirpath}' does not exist. Do you make this directory? (Y/n) "
      read yesno
      case "${yesno}" in
      [Yy] | "")
        mkdir -p "${dirpath}"
        if [ $? -ne 0 ]; then
          return ${E_MKDIR_FAIL}
        fi
        ;;
      *)
        echo "Invalid path: ${dirpath}"
        return ${E_INVALID_DIR}
        ;;
      esac
    fi

    cd "${dirpath}"
    if [[ "${tag}" == "." ]]; then
      tag="$(basename $(pwd))"
    fi
    save "${savepath}" "$(pwd)" "${tag}"
  fi

  return 0
}

main "$1" "$2"
